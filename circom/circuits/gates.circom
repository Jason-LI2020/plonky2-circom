// This file was generated by verifier.rs

pragma circom 2.1.0;
include "./goldilocks_ext.circom";
include "./utils.circom";
include "./poseidon.circom";

template ConstraintPush() {
  signal input constraint[2];
  signal input filter[2];
  signal input value[2];

  signal output out[2];
  out <== GlExtAdd()(constraint, GlExtMul()(value, filter));
}

template EvalGateConstraints() {
  signal input constants[NUM_OPENINGS_CONSTANTS()][2];
  signal input wires[NUM_OPENINGS_WIRES()][2];
  signal input public_input_hash[4];
  signal input constraints[NUM_GATE_CONSTRAINTS()][2];
  signal output out[NUM_GATE_CONSTRAINTS()][2];

  // ConstantGate { num_consts: 2 }
  component c_Constant2 = Constant2();
  c_Constant2.constants <== constants;
  c_Constant2.wires <== wires;
  c_Constant2.public_input_hash <== public_input_hash;
  c_Constant2.constraints <== constraints;
  for (var i = 0; i < NUM_GATE_CONSTRAINTS(); i++) {
    log(i, c_Constant2.out[i][0], c_Constant2.out[i][1]);
  }

  // PublicInputGate
  component c_PublicInputGateLib = PublicInputGateLib();
  c_PublicInputGateLib.constants <== constants;
  c_PublicInputGateLib.wires <== wires;
  c_PublicInputGateLib.public_input_hash <== public_input_hash;
  c_PublicInputGateLib.constraints <== c_Constant2.out;
  for (var i = 0; i < NUM_GATE_CONSTRAINTS(); i++) {
    log(i, c_PublicInputGateLib.out[i][0], c_PublicInputGateLib.out[i][1]);
  }

  // PoseidonGate { _phantom: PhantomData }<WIDTH=12>
  component c_Constant$NUM_CONSTANTS = Constant$NUM_CONSTANTS();
  c_Constant$NUM_CONSTANTS.constants <== constants;
  c_Constant$NUM_CONSTANTS.wires <== wires;
  c_Constant$NUM_CONSTANTS.public_input_hash <== public_input_hash;
  c_Constant$NUM_CONSTANTS.constraints <== c_PublicInputGateLib.out;
  for (var i = 0; i < NUM_GATE_CONSTRAINTS(); i++) {
    log(i, c_Constant$NUM_CONSTANTS.out[i][0], c_Constant$NUM_CONSTANTS.out[i][1]);
  }
  out <== c_Constant$NUM_CONSTANTS.out;
}
template Constant2() {
  signal input constants[NUM_OPENINGS_CONSTANTS()][2];
  signal input wires[NUM_OPENINGS_WIRES()][2];
  signal input public_input_hash[4];
  signal input constraints[NUM_GATE_CONSTRAINTS()][2];
  signal output out[NUM_GATE_CONSTRAINTS()][2];

  signal filter[2];
  filter <== GlExtMul()(GlExtSub()(GlExt(0, 0)(), constants[0]), GlExtMul()(GlExtSub()(GlExt(2, 0)(), constants[0]), GlExtMul()(GlExtSub()(GlExt(4294967295, 0)(), constants[0]), GlExt(1, 0)())));

  for (var i = 0; i < 2; i++) {
    out[i] <== ConstraintPush()(constraints[i], filter, GlExtSub()(constants[2 + i], wires[i]));
  }
  for (var i = 2; i < NUM_GATE_CONSTRAINTS(); i++) {
    out[i] <== constraints[i];
  }
}
template PublicInputGateLib() {
  signal input constants[NUM_OPENINGS_CONSTANTS()][2];
  signal input wires[NUM_OPENINGS_WIRES()][2];
  signal input public_input_hash[4];
  signal input constraints[NUM_GATE_CONSTRAINTS()][2];
  signal output out[NUM_GATE_CONSTRAINTS()][2];

  signal filter[2];
  filter <== GlExtMul()(GlExtSub()(GlExt(0, 0)(), constants[0]), GlExtMul()(GlExtSub()(GlExt(1, 0)(), constants[0]), GlExtMul()(GlExtSub()(GlExt(4294967295, 0)(), constants[0]), GlExt(1, 0)())));

  signal hashes[4][2];
  for (var i = 0; i < 4; i++) {
    hashes[i][0] <== public_input_hash[i];
    hashes[i][1] <== 0;
    out[i] <== ConstraintPush()(constraints[i], filter, GlExtSub()(wires[i], hashes[i]));
  }
  for (var i = 4; i < NUM_GATE_CONSTRAINTS(); i++) {
    out[i] <== constraints[i];
  }
}
template Constant$NUM_CONSTANTS() {
  signal input constants[NUM_OPENINGS_CONSTANTS()][2];
  signal input wires[NUM_OPENINGS_WIRES()][2];
  signal input public_input_hash[4];
  signal input constraints[NUM_GATE_CONSTRAINTS()][2];
  signal output out[NUM_GATE_CONSTRAINTS()][2];

  signal filter[2];
  filter <== GlExtMul()(GlExtSub()(GlExt(4294967295, 0)(), constants[1]), GlExt(1, 0)());

  var index = 0;
  out[index] <== ConstraintPush()(constraints[index], filter, GlExtMul()(wires[24], GlExtSub()(wires[24], GlExt(1, 0)())));
  index++;

  for (var i = 0; i < 4; i++) {
    out[index] <== ConstraintPush()(constraints[index], filter, GlExtSub()(GlExtMul()(wires[24], GlExtSub()(wires[i + 4], wires[i])), wires[25 + i]));
    index++;
  }

  // SPONGE_RATE = 8
  // SPONGE_CAPACITY = 4
  // SPONGE_WIDTH = 12
  signal state[12][4 * 4 + 2][2];
  var state_round = 0;
  for (var i = 0; i < 4; i++) {
    state[i][state_round] <== GlExtAdd()(wires[i], wires[25 + i]);
    state[i + 4][state_round] <== GlExtSub()(wires[i + 4], wires[25 + i]);
  }

  for (var i = 8; i < 12; i++) {
    state[i][state_round] <== wires[i];
  }
  state_round++;

  var round_ctr = 0;

  // First set of full rounds.
  signal mds_row_shf_field[4][12][13][2];
  for (var r = 0; r < 4; r ++) {
    for (var i = 0; i < 12; i++) {
      state[i][state_round] <== GlExtAdd()(state[i][state_round - 1], GlExt(GL_CONST(i + 12 * round_ctr), 0)());
    }
    state_round++;
    if (r != 0 ) {
      for (var i = 0; i < 12; i++) {
        state[i][state_round] <== wires[25 + 4 + 12 * (r - 1) + i];
        out[index] <== ConstraintPush()(constraints[index], filter, GlExtSub()(state[i][state_round - 1], state[i][state_round]));
        index++;
      }
      state_round++;
    }
    for (var i = 0; i < 12; i++) {
      state[i][state_round] <== GlExtExpN(3)(state[i][state_round - 1], 7);
    }
    state_round++;
    for (var i = 0; i < 12; i++) { // for r
      mds_row_shf_field[r][i][0][0] <== 0;
      mds_row_shf_field[r][i][0][1] <== 0;
      for (var j = 0; j < 12; j++) { // for i,
        mds_row_shf_field[r][i][j + 1] <== GlExtAdd()(mds_row_shf_field[r][i][j], GlExtMul()(state[(i + j) % 12][state_round - 1], GlExt(MDS_MATRIX_CIRC(j), 0)()));
      }
      state[i][state_round] <== GlExtAdd()(mds_row_shf_field[r][i][12], GlExtMul()(state[i][state_round - 1], GlExt(MDS_MATRIX_DIAG(i), 0)()));
    }
    state_round++;
    round_ctr++;
  }

  // Partial rounds.
  for (var i = 0; i < 12; i++) {
    state[i][state_round] <== GlExtAdd()(state[i][state_round - 1], GlExt(FAST_PARTIAL_FIRST_ROUND_CONSTANT(i), 0)());
  }
  state_round++;
  signal partial_res[12][11][2];
  state[0][state_round] <== state[0][state_round - 1];
  for (var i = 0; i < 11; i++) {
    partial_res[0][i][0] <== 0;
    partial_res[0][i][1] <== 0;
  }
  for (var r = 1; r < 12; r++) {
    for (var c = 1; c < 12; c++) {
      partial_res[r][c - 1] <== GlExtAdd()(partial_res[r - 1][c - 1] ,GlExtMul()(state[r][state_round - 1], GlExt(FAST_PARTIAL_ROUND_INITIAL_MATRIX(r - 1, c - 1), 0)()));
    }
  }
  for (var i = 1; i < 12; i++) {
    state[i][state_round] <== partial_res[11][i - 1];
  }
  state_round++;

  for (var i = 0; i < 12; i++) {
    log(state[i][state_round - 1][0], state[i][state_round - 1][1]);
  }

  for (var i = index + 1; i < NUM_GATE_CONSTRAINTS(); i++) {
    out[i] <== constraints[i];
  }
}
function FAST_PARTIAL_ROUND_INITIAL_MATRIX(i, j) {
  var value[11][11];
  value[0][0] = 9256917872013944843;
  value[0][1] = 15893897022228540664;
  value[0][2] = 13949760578536372653;
  value[0][3] = 10441609312974976515;
  value[0][4] = 4189528951266599854;
  value[0][5] = 45832257923618046;
  value[0][6] = 8607345711887993138;
  value[0][7] = 10398036555777403988;
  value[0][8] = 13806692727776539476;
  value[0][9] = 4187764176355919243;
  value[0][10] = 4771889745340348367;
  value[1][0] = 16687757000829461707;
  value[1][1] = 12764541860482007578;
  value[1][2] = 1073506034073544330;
  value[1][3] = 12178624353196374758;
  value[1][4] = 9093834777404014814;
  value[1][5] = 12470775297641857694;
  value[1][6] = 14365012582629183475;
  value[1][7] = 17322896464470575084;
  value[1][8] = 12929063850085080619;
  value[1][9] = 8008291477586393637;
  value[1][10] = 4187764176355919243;
  value[2][0] = 15919568759443364026;
  value[2][1] = 1487496629277845135;
  value[2][2] = 5122203447763166523;
  value[2][3] = 2200314810679404686;
  value[2][4] = 13521131922395904812;
  value[2][5] = 16674096007358536750;
  value[2][6] = 12650089191056401741;
  value[2][7] = 15914053419498374975;
  value[2][8] = 14774060794419120357;
  value[2][9] = 12929063850085080619;
  value[2][10] = 13806692727776539476;
  value[3][0] = 17628276356247382281;
  value[3][1] = 14211060579632108547;
  value[3][2] = 9180588347636943785;
  value[3][3] = 11858291964101661402;
  value[3][4] = 3422342838493228737;
  value[3][5] = 16717315056857949245;
  value[3][6] = 4874593437852546498;
  value[3][7] = 14575430061120165237;
  value[3][8] = 15914053419498374975;
  value[3][9] = 17322896464470575084;
  value[3][10] = 10398036555777403988;
  value[4][0] = 17976887162229714000;
  value[4][1] = 6791692987299703477;
  value[4][2] = 6455531853563710059;
  value[4][3] = 506729933833272474;
  value[4][4] = 12479288794463684010;
  value[4][5] = 12357738834545821552;
  value[4][6] = 14664271473160014313;
  value[4][7] = 4874593437852546498;
  value[4][8] = 12650089191056401741;
  value[4][9] = 14365012582629183475;
  value[4][10] = 8607345711887993138;
  value[5][0] = 9191356322801962495;
  value[5][1] = 5412105005886646653;
  value[5][2] = 7077135177323540712;
  value[5][3] = 13768926573657667599;
  value[5][4] = 14009018616032686342;
  value[5][5] = 8447498431838444578;
  value[5][6] = 12357738834545821552;
  value[5][7] = 16717315056857949245;
  value[5][8] = 16674096007358536750;
  value[5][9] = 12470775297641857694;
  value[5][10] = 45832257923618046;
  value[6][0] = 8244675934684975988;
  value[6][1] = 2125569474183208192;
  value[6][2] = 1761883289931249101;
  value[6][3] = 9202082607097456696;
  value[6][4] = 9665676628089346926;
  value[6][5] = 14009018616032686342;
  value[6][6] = 12479288794463684010;
  value[6][7] = 3422342838493228737;
  value[6][8] = 13521131922395904812;
  value[6][9] = 9093834777404014814;
  value[6][10] = 4189528951266599854;
  value[7][0] = 7268127472833019981;
  value[7][1] = 5600686741053600354;
  value[7][2] = 13703919263985638019;
  value[7][3] = 155673126466762010;
  value[7][4] = 9202082607097456696;
  value[7][5] = 13768926573657667599;
  value[7][6] = 506729933833272474;
  value[7][7] = 11858291964101661402;
  value[7][8] = 2200314810679404686;
  value[7][9] = 12178624353196374758;
  value[7][10] = 10441609312974976515;
  value[8][0] = 9602108300053878928;
  value[8][1] = 15610298188943525805;
  value[8][2] = 13828402413953013890;
  value[8][3] = 13703919263985638019;
  value[8][4] = 1761883289931249101;
  value[8][5] = 7077135177323540712;
  value[8][6] = 6455531853563710059;
  value[8][7] = 9180588347636943785;
  value[8][8] = 5122203447763166523;
  value[8][9] = 1073506034073544330;
  value[8][10] = 13949760578536372653;
  value[9][0] = 1540311261654516052;
  value[9][1] = 10517970165082627573;
  value[9][2] = 15610298188943525805;
  value[9][3] = 5600686741053600354;
  value[9][4] = 2125569474183208192;
  value[9][5] = 5412105005886646653;
  value[9][6] = 6791692987299703477;
  value[9][7] = 14211060579632108547;
  value[9][8] = 1487496629277845135;
  value[9][9] = 12764541860482007578;
  value[9][10] = 15893897022228540664;
  value[10][0] = 15582992301522062240;
  value[10][1] = 1540311261654516052;
  value[10][2] = 9602108300053878928;
  value[10][3] = 7268127472833019981;
  value[10][4] = 8244675934684975988;
  value[10][5] = 9191356322801962495;
  value[10][6] = 17976887162229714000;
  value[10][7] = 17628276356247382281;
  value[10][8] = 15919568759443364026;
  value[10][9] = 16687757000829461707;
  value[10][10] = 9256917872013944843;
  return value[i][j];
}
function FAST_PARTIAL_FIRST_ROUND_CONSTANT(i) {
  var value[12];
  value[0] = 4378616569090929672;
  value[1] = 16831074976302798833;
  value[2] = 17474843094576853935;
  value[3] = 15154628183104001226;
  value[4] = 14219868664549115443;
  value[5] = 10509321604391016962;
  value[6] = 17545903601470498427;
  value[7] = 3273629310481947241;
  value[8] = 8362887214150162593;
  value[9] = 7587761356207546181;
  value[10] = 6959023468757315912;
  value[11] = 14065947794859331340;
  return value[i];
}
function MDS_MATRIX_CIRC(i) {
  var mds[12];
  mds[0] = 17;
  mds[1] = 15;
  mds[2] = 41;
  mds[3] = 16;
  mds[4] = 2;
  mds[5] = 28;
  mds[6] = 13;
  mds[7] = 13;
  mds[8] = 39;
  mds[9] = 18;
  mds[10] = 34;
  mds[11] = 20;
  return mds[i];
}
function MDS_MATRIX_DIAG(i) {
  var mds[12];
  mds[0] = 8;
  mds[1] = 0;
  mds[2] = 0;
  mds[3] = 0;
  mds[4] = 0;
  mds[5] = 0;
  mds[6] = 0;
  mds[7] = 0;
  mds[8] = 0;
  mds[9] = 0;
  mds[10] = 0;
  mds[11] = 0;
  return mds[i];
}
